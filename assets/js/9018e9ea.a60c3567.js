"use strict";(self.webpackChunkmetacall_tutorial=self.webpackChunkmetacall_tutorial||[]).push([[179],{8715:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"how-metacall-works","title":"How Metacall works","description":"Metacall is a runtime that allows you to seamlessly connect and interoperate between multiple programming languages. It acts as a bridge, enabling you to call functions from one language in another without worrying about compatibility issues.","source":"@site/docs/how-metacall-works.md","sourceDirName":".","slug":"/how-metacall-works","permalink":"/metacall-tutorial/docs/how-metacall-works","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with Metacall","permalink":"/metacall-tutorial/docs/getting-started"},"next":{"title":"Installating Metacall CLI","permalink":"/metacall-tutorial/docs/category/installating-metacall-cli"}}');var o=a(4848),s=a(8453);const i=a.p+"assets/images/arch-52ac01d85ce117a2bb56b8d994269b10.png",r=a.p+"assets/images/meta-object-protocol-6c741c8403c13dfc431fa364f1747e0d.png",l=a.p+"assets/images/loader-51f4e898d31cb864ca9225633ef29aab.png",c={sidebar_position:2},d="How Metacall works",h={},p=[{value:"1. Ports",id:"1-ports",level:3},{value:"2. Metacall C API",id:"2-metacall-c-api",level:3},{value:"3. Metacall Object Protocol",id:"3-metacall-object-protocol",level:3},{value:"4. Loaders",id:"4-loaders",level:3},{value:"5. Serials",id:"5-serials",level:3}];function u(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"how-metacall-works",children:"How Metacall works"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Metacall"})," is a runtime that allows you to seamlessly connect and interoperate between multiple programming languages. It acts as a bridge, enabling you to call functions from one language in another without worrying about compatibility issues."]}),"\n",(0,o.jsx)("br",{}),"\n","\n",(0,o.jsx)("img",{src:i,style:{boxShadow:"5px 5px 10px #888",border:"2px solid black",width:"40vw",maxWidth:"100%",display:"block",margin:"auto"}}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.h3,{id:"1-ports",children:"1. Ports"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Ports"})," are the entry points where your code is accepted into the Metacall system. Each port corresponds to a specific programming language."]}),"\n",(0,o.jsx)(t.p,{children:"Ports act as adapters, ensuring that the code from different languages can be understood and processed by Metacall."}),"\n",(0,o.jsxs)(t.p,{children:["If you run an ",(0,o.jsx)(t.code,{children:"index.js"})," file, the Node port will accept it and forward it to the Metacall C API."]}),"\n",(0,o.jsx)(t.h3,{id:"2-metacall-c-api",children:"2. Metacall C API"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Metacall C API"})," is the core component that connects the ports to the loaders. It acts as a dispatcher, routing functions to the appropriate language runtime."]}),"\n",(0,o.jsx)(t.p,{children:"The C API is written in C for performance and compatibility reasons, as C can easily interface with almost any programming language."}),"\n",(0,o.jsxs)(t.p,{children:["If your ",(0,o.jsx)(t.code,{children:"index.js"})," file contains a call to a Python function, the Metacall C API will detect this and send the Python function to the Python loader, while sending the JavaScript functions to the Node loader."]}),"\n",(0,o.jsx)(t.h3,{id:"3-metacall-object-protocol",children:"3. Metacall Object Protocol"}),"\n","\n",(0,o.jsx)("img",{src:r,style:{boxShadow:"5px 5px 10px #888",border:"2px solid black",width:"25vw",maxWidth:"100%",display:"block",margin:"auto"}}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"MOP"})," is responsible for handling data type conversions between different languages. Each language has its own data types (e.g., integers, strings, objects), and the MOP ensures these types can be converted seamlessly."]}),"\n",(0,o.jsx)(t.p,{children:"The MOP avoids type mismatches and ensures smooth communication between languages."}),"\n",(0,o.jsx)(t.p,{children:"If a Python function returns a dictionary, the MOP will convert it into a JavaScript object so it can be used in your index.js file."}),"\n",(0,o.jsx)(t.h3,{id:"4-loaders",children:"4. Loaders"}),"\n","\n",(0,o.jsx)("img",{src:l,style:{boxShadow:"5px 5px 10px #888",border:"2px solid black",width:"15vw",maxWidth:"100%",display:"block",margin:"auto"}}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.p,{children:"Loaders are responsible for loading the appropriate runtime for a specific language and executing the function."}),"\n",(0,o.jsx)(t.p,{children:"Loaders are language-specific and ensure that the correct runtime environment is initialized for execution."}),"\n",(0,o.jsx)(t.p,{children:"When the Python loader receives a Python function, it loads the Python runtime, executes the function, and sends the output back to the Metacall C API."}),"\n",(0,o.jsx)(t.h3,{id:"5-serials",children:"5. Serials"}),"\n",(0,o.jsx)(t.p,{children:"Serials handle the serialization and deserialization of data. Serialization is the process of converting data into a format that can be easily transferred between languages, while deserialization is the reverse process."}),"\n",(0,o.jsx)(t.p,{children:"Serials ensure that data remains consistent and intact when moving between different language runtimes."}),"\n",(0,o.jsx)(t.p,{children:"If a Python function returns a complex data structure, the serials will convert it into a format (like JSON) that can be understood by JavaScript."})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var n=a(6540);const o={},s=n.createContext(o);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);